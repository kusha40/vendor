@using Vendor_Indusuno.Extensions
@model Vendor_Indusuno.ViewModels.PurchaseOrdersViewModel
@{
    ViewBag.Title = "Material Receive";
    TempData["Operations"] = "active";
    TempData["MaterialReceive"] = "active";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    @{
        string pageTitle = Html.Raw(Html.PageGTitle()) + "";
    }
    <h1>
        @pageTitle
        <small></small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index")"><i class="fa fa-dashboard"></i> Dashboard</a></li>
        @Html.Raw(Html.BuildBreadcrumbNavigation())
        @*<li class="active">Dashboard</li>*@
    </ol>
</section>
<!-- Main content -->
<section class="content">
    @using (Html.BeginForm("MaterialReceive", "Admin", FormMethod.Post, new { id = "form_advanced_validation", autocomplete = "off", enctype = "multipart/form-data" }))
    {

        @Html.AntiForgeryToken()
        <!-- Main row -->
        <div class="row">
            <div class="col-lg-12">
                <!-- Default box -->
                <div class="box">
                    <div class="col-md-12">
                        <div class="msgs">
                            @if (ViewData?.ModelState[""]?.Errors?.Any() == true)
                            {
                                <div class="alert alert-danger alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-ban"></i> Error!</h4>
                                    @Html.ValidationSummary(true, "", new { @class = "" })
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(ViewBag.SucMsg))
                            {
                                <div class="alert alert-success alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-check"></i> Success!</h4>
                                    <strong>Well done!</strong> @ViewBag.SucMsg
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(ViewBag.ErrMsg))
                            {
                                <div class="alert alert-danger alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-ban"></i> Error!</h4>
                                    <strong>Oh snap!</strong> @ViewBag.ErrMsg
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(TempData["ErrMsg"] + ""))
                            {
                                <div class="alert alert-danger alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-ban"></i> Error!</h4>
                                    <strong>Oh snap!</strong> @TempData["ErrMsg"]
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(TempData["SucMsg"] + ""))
                            {
                                <div class="alert alert-success alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-check"></i> Success!</h4>
                                    <strong>Well done!</strong> @TempData["SucMsg"]
                                </div>
                            }
                        </div>
                    </div>
                    <div class="box-body">
                        <table id="tblMaterialReceive" class="tbl table table-bordered display">
                            <thead>
                                <tr>
                                    <th>SNo</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().POPId)</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Product)</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().VendorPrice)</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Quantity)</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().RemainingQuantity)</th>
                                    <th width="10%">@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().ReceiveQuantity)</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().GST)</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Total)</th>
                                    <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().TotalWTax)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int i = 1;
                                }
                                @foreach (var item in Model.PurchaseOrdersModelList)
                                {
                                    <tr>
                                        <td>@i</td>
                                        <td>@Html.DisplayFor(modelItem => item.POPId)</td>
                                        <td title="@item.SpcRemark">
                                            @Html.DisplayFor(modelItem => item.Product)<br>
                                            Brand : @item.Brand<br>
                                            Model : @item.ModelNo
                                        </td>
                                        <td class="vprc">@Html.DisplayFor(modelItem => item.VendorPrice)</td>
                                        <td class="qty">@Html.DisplayFor(modelItem => item.Quantity)</td>
                                        <td class="remqty">@Html.DisplayFor(modelItem => item.RemainingQuantity)</td>
                                        <td>@Html.TextBox("PurchaseOrdersModelList_ReceiveQuantity" + i, item.RemainingQuantity, new { @class = "form-control ircvqty onlynumdec", @data_required = true })</td>
                                        <td class="gst">@Html.DisplayFor(modelItem => item.GST)</td>
                                        <td class="tot">@Html.DisplayFor(modelItem => item.Total)</td>
                                        <td class="totwtax">@Html.DisplayFor(modelItem => item.TotalWTax)</td>
                                    </tr>
                                    i++;
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="box-footer">
                        <div class="col-md-12">
                            <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvStockModels.VendorInvoice, new { @class = "form-control-label" }) <sup>*</sup>
                                    @Html.TextBoxFor(m => m.InvStockModels.VendorInvoice,
                            new
                            {
                                @class = "form-control",
                                @type = "file",
                                placeholder = "Enter " + @Html.DisplayNameFor(m => m.InvStockModels.VendorInvoice)
                            })
                                    @Html.ValidationMessageFor(m => m.InvStockModels.VendorInvoice, "",
                            new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="box-tools pull-right">
                                <button name="mrsubmit" id="mrsubmit" class="btn bg-aqua" title="SUBMIT"
                                        value="submit">
                                    SUBMIT
                                </button>
                            </div>
                        </div>
                    </div>
                    <!-- /.box -->
                </div>
            </div>
        </div>
        <!-- danger with sound -->
        <div class="message-box animated fadeIn" data-sound="alert" id="mb-sub-confirm">
            <div class="mb-container">
                <div class="mb-middle">
                    <div class="mb-title"><span class="fa fa-warning"></span> Confirm <strong>Box</strong> ?</div>
                    <div class="mb-content">
                        <p>Are you sure you want to submit?</p>
                        <p>Press No if you want to Cancel. Press Yes to Submit the record.</p>
                    </div>
                    <div class="mb-footer">
                        <div class="pull-right">
                            <button name="posubmit" class="btn btn-confirm-yes btn-lg" title="Yes">
                                Yes
                            </button>
                            <button class="btn btn-confirm-no btn-lg mb-control-close">No</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- end danger with sound -->
    }
</section>
<!-- /.content -->
