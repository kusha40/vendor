@using Vendor_Indusuno.Extensions
@model Vendor_Indusuno.ViewModels.PORequestInvoiceUploadViewModel
@{
    ViewBag.Title = "PO Request Invoice Upload";
    TempData["Stocks"] = "active";
    TempData["RequestedInvoice"] = "active";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    @{
        string actType = "Add";
        string actBtn = "Submit";
        string pageTitle = Html.Raw(Html.PageGTitle()) + "";
        if (!String.IsNullOrEmpty(Model.RequestInvoiceUploadModels.Id))
        {
            actType = "Edit";
            actBtn = "Update";
        }
    }
    <h1>
        @pageTitle
        <small></small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index")"><i class="fa fa-dashboard"></i> Dashboard</a></li>
        @Html.Raw(Html.BuildBreadcrumbNavigation())
    </ol>
</section>
<!-- Main content -->
<section class="content">
    @using (Html.BeginForm("PORequestInvoiceUpload", "Admin", FormMethod.Post, new { id = "form_advanced_validation", autocomplete = "off", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <!-- Main row -->
    <div class="row">
        <div class="col-lg-12">
            <!-- Default box -->
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">@actType @pageTitle</h3>
                    <div class="box-tools pull-right">
                    </div>
                </div>
                <div class="box-body">
                    <div class="col-md-12">
                        <div class="msgs">
                            @if (ViewData?.ModelState[""]?.Errors?.Any() == true)
                            {
                                <div class="alert alert-danger alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-ban"></i> Error!</h4>
                                    @Html.ValidationSummary(true, "", new { @class = "" })
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(ViewBag.SucMsg))
                            {
                                <div class="alert alert-success alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-check"></i> Success!</h4>
                                    <strong>Well done!</strong> @ViewBag.SucMsg
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(ViewBag.ErrMsg))
                            {
                                <div class="alert alert-danger alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-ban"></i> Error!</h4>
                                    <strong>Oh snap!</strong> @ViewBag.ErrMsg
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(TempData["ErrMsg"] + ""))
                            {
                                <div class="alert alert-danger alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-ban"></i> Error!</h4>
                                    <strong>Oh snap!</strong> @TempData["ErrMsg"]
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(TempData["SucMsg"] + ""))
                            {
                                <div class="alert alert-success alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-check"></i> Success!</h4>
                                    <strong>Well done!</strong> @TempData["SucMsg"]
                                </div>
                            }
                        </div>
                        @Html.HiddenFor(model => model.RequestInvoiceUploadModels.RInvoiceNo)
                        @Html.HiddenFor(model => model.RequestInvoiceUploadModels.Id)
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PurOrdModels.CustomerId, new { @class = "form-control-label" }) <sup>*</sup>
                                    @Html.TextAreaFor(m => m.PurOrdModels.CustomerId,
                            new
                            {
                                @class = "form-control text-capitalize cstid",
                                @readonly = true,
                                placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.CustomerId)
                            })
                                    @Html.ValidationMessageFor(m => m.PurOrdModels.CustomerId, "",
                            new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PurOrdModels.CustomerBillAdd, new { @class = "form-control-label" }) <sup>*</sup>
                                    @Html.TextAreaFor(m => m.PurOrdModels.CustomerBillAdd,
                            new
                            {
                                @class = "form-control text-capitalize cstbadd",
                                @readonly = true,
                                placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.CustomerBillAdd)
                            })
                                    @Html.ValidationMessageFor(m => m.PurOrdModels.CustomerBillAdd, "",
                            new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PurOrdModels.CustomerShipAdd, new { @class = "form-control-label" }) <sup>*</sup>
                                    @Html.TextAreaFor(m => m.PurOrdModels.CustomerShipAdd,
                            new
                            {
                                @class = "form-control text-capitalize cstsadd",
                                @readonly = true,
                                placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.CustomerShipAdd)
                            })
                                    @Html.ValidationMessageFor(m => m.PurOrdModels.CustomerShipAdd, "",
                            new { @class = "text-danger" })
                                </div>
                            </div>
                            @*<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PurOrdModels.CustomerBillAdd, new { @class = "form-control-label" }) <sup>*</sup>
                                    @Html.DropDownListFor(m => m.PurOrdModels.CustomerBillAdd, new SelectList(Model.CustomerBilAddModelList, "Key", "Value"),
                                    "--Customer Billing Address--", new { @class = "form-control select2 cstbadd" })
                                    @Html.ValidationMessageFor(m => m.PurOrdModels.CustomerBillAdd, "",
                            new { @class = "text-danger errcstbadd" })
                                </div>
                            </div>*@
                            @*<div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PurOrdModels.CustomerShipAdd, new { @class = "form-control-label" }) <sup>*</sup>
                                    @Html.DropDownListFor(m => m.PurOrdModels.CustomerShipAdd, new SelectList(Model.CustomerShipAddModelList, "Key", "Value"),
                                    "--Customer Shipping Address--", new { @class = "form-control select2 cstsadd" })
                                    @Html.ValidationMessageFor(m => m.PurOrdModels.CustomerShipAdd, "",
                            new { @class = "text-danger errcstsadd" })
                                </div>
                            </div>*@
                            <div class="col-md-12 row">
                                <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurOrdModels.POType, new { @class = "form-control-label" })
                                        @Html.DropDownListFor(m => m.PurOrdModels.POType,
                                       new List<SelectListItem>
                                          {
                                            new SelectListItem{ Text="Regular", Value = "Regular", Selected = true  },
                                            new SelectListItem{ Text="Open PO", Value = "Open PO" },
                                            new SelectListItem{ Text="ARC", Value = "ARC" },
                                          },
                                        "--Select PO Type--", new { @class = "form-control select2 potype", @disabled = true })
                                        @Html.ValidationMessageFor(m => m.PurOrdModels.POType, "",
                                new { @class = "text-danger errpotype" })
                                    </div>
                                </div>
                                <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurOrdModels.POId, new { @class = "form-control-label" }) <sup>*</sup>
                                        @Html.TextBoxFor(m => m.PurOrdModels.POId,
                                new
                                {
                                    @class = "form-control text-capitalize poid",
                                    @readonly = true,
                                    placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.POId)
                                })
                                        @Html.ValidationMessageFor(m => m.PurOrdModels.POId, "",
                                new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurOrdModels.PONumber, new { @class = "form-control-label" }) <sup>*</sup>
                                        @Html.TextBoxFor(m => m.PurOrdModels.PONumber,
                                new
                                {
                                    @readonly = true,
                                    @class = "form-control text-capitalize pono",
                                    placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.PONumber)
                                })
                                        @Html.ValidationMessageFor(m => m.PurOrdModels.PONumber, "",
                                new { @class = "text-danger errpono" })
                                    </div>
                                </div>
                                <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurOrdModels.LineItems, new { @class = "form-control-label" }) <sup>*</sup>
                                        @Html.TextBoxFor(m => m.PurOrdModels.LineItems,
                                new
                                {
                                    @class = "form-control polneitm",
                                    @type = "number",
                                    @readonly = true,
                                    placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.LineItems)
                                })
                                        @Html.ValidationMessageFor(m => m.PurOrdModels.LineItems, "",
                                new { @class = "text-danger errpolneitm" })
                                    </div>
                                </div>
                                <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurOrdModels.OrderDate, new { @class = "form-control-label" }) <sup>*</sup>
                                        @Html.TextBoxFor(m => m.PurOrdModels.OrderDate,
                                new
                                {
                                    @class = "form-control poorddate datepicker",
                                    @readonly = true,
                                    placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.OrderDate)
                                })
                                        @Html.ValidationMessageFor(m => m.PurOrdModels.OrderDate, "",
                                new { @class = "text-danger errpoorddate" })
                                    </div>
                                </div>
                                <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurOrdModels.ExpDlvDate, new { @class = "form-control-label" }) <sup>*</sup>
                                        @Html.TextBoxFor(m => m.PurOrdModels.ExpDlvDate,
                                new
                                {
                                    @class = "form-control poedlvdate datepicker",
                                    @readonly = true,
                                    placeholder = @Html.DisplayNameFor(m => m.PurOrdModels.ExpDlvDate)
                                })
                                        @Html.ValidationMessageFor(m => m.PurOrdModels.ExpDlvDate, "",
                                new { @class = "text-danger errpoedlvdate" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /.box -->
        </div>
        <div class="col-lg-12">
            <!-- Default box -->
            <div class="box">
                <!--<div class="box-header with-border">-->
                @*<h3 class="box-title">@Html.ActionLink("New Purchase Order", "PurchaseOrder", "Admin", null, new { @class = "btn btn-edt bg-aqua", title = "New Purchase Order" })</h3>*@
                <!--</div>-->
                <!-- /.box-body -->
                <div class="box-body">
                    <table id="tblpodetails" class="table table-bordered display">
                        <thead>
                            <tr>
                                <th>SNo</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().PONumber)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().POId)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().POPId)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Product)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Quantity)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Price)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Discount)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().TotalPrice)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().VendorPrice)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().Margin)</th>
                                <th>@Html.DisplayNameFor(model => model.PurchaseOrdersModelList.FirstOrDefault().GST)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.PurchaseOrdersModelList)
                            {
                                <tr>
                                    <td></td>
                                    <td>@Html.DisplayFor(modelItem => item.PONumber)</td>
                                    <td>@Html.DisplayFor(modelItem => item.POId)</td>
                                    <td>@Html.DisplayFor(modelItem => item.POPId)</td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Product)<br>
                                        Brand : @item.Brand<br>
                                        Model : @item.ModelNo
                                    </td>
                                    <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Price)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Discount)</td>
                                    <td>@Html.DisplayFor(modelItem => item.TotalPrice)</td>
                                    <td>@Html.DisplayFor(modelItem => item.VendorPrice)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Margin)%</td>
                                    <td>@Html.DisplayFor(modelItem => item.GST)%</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <!-- /.box -->
            </div>
        </div>

        <div class="col-lg-12">
            <!-- Default box -->
            <div class="box">
                <div class="box-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.RequestInvoiceUploadModels.RInvoiceNo, new { @class = "form-control-label" })
                                    @Html.TextBoxFor(m => m.RequestInvoiceUploadModels.RInvoiceNo,
         new
         {
             @class = "form-control text-uppercase",
             @readonly = true,
             placeholder = "Enter " + @Html.DisplayNameFor(m => m.RequestInvoiceUploadModels.RInvoiceNo)
         })
                                    @Html.ValidationMessageFor(m => m.RequestInvoiceUploadModels.RInvoiceNo, "",
         new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.RequestInvoiceUploadModels.InvoiceNo, new { @class = "form-control-label" })
                                    @Html.TextBoxFor(m => m.RequestInvoiceUploadModels.InvoiceNo,
         new
         {
             @class = "form-control text-uppercase",
             placeholder = "Enter " + @Html.DisplayNameFor(m => m.RequestInvoiceUploadModels.InvoiceNo)
         })
                                    @Html.ValidationMessageFor(m => m.RequestInvoiceUploadModels.InvoiceNo, "",
         new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.RequestInvoiceUploadModels.InvoiceDate, new { @class = "form-control-label" })
                                    @Html.TextBoxFor(m => m.RequestInvoiceUploadModels.InvoiceDate,
         new
         {
             @class = "form-control datepicker",
             placeholder = "Enter " + @Html.DisplayNameFor(m => m.RequestInvoiceUploadModels.InvoiceDate)
         })
                                    @Html.ValidationMessageFor(m => m.RequestInvoiceUploadModels.InvoiceDate, "",
         new { @class = "text-danger" })
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(Model.RequestInvoiceUploadModels.RInvoiceNo))
                            {
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.RequestInvoiceUploadModels.InvUpload, new { @class = "form-control-label" }) <sup>*</sup>
                                        @Html.TextBoxFor(m => m.RequestInvoiceUploadModels.InvUpload,
          new
          {
              @class = "form-control",
              @type = "file",
              placeholder = "Enter " + @Html.DisplayNameFor(m => m.RequestInvoiceUploadModels.InvUpload)
          })
                                        @Html.ValidationMessageFor(m => m.RequestInvoiceUploadModels.InvUpload, "",
          new { @class = "text-danger" })
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.RequestInvoiceUploadModels.InvUpload, new { @class = "form-control-label" }) <sup>*</sup>
                                        @Html.TextBoxFor(m => m.RequestInvoiceUploadModels.InvUpload,
          new
          {
              @class = "form-control",
              @type = "file",
              @required = true,
              placeholder = "Enter " + @Html.DisplayNameFor(m => m.RequestInvoiceUploadModels.InvUpload)
          })
                                        @Html.ValidationMessageFor(m => m.RequestInvoiceUploadModels.InvUpload, "",
          new { @class = "text-danger" })
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <!-- /.box-body -->
                <div class="box-footer">
                    <div class="col-md-12">
                        <div class="box-tools pull-left">
                            <button type="submit" name="@actBtn.ToLower()" class="btn bg-aqua" title="@actBtn"
                                    value="@actBtn">
                                @actBtn.ToUpper()
                            </button>
                        </div>
                        <div class="box-tools pull-right">
                            <button type="submit" name="reset" class="btn btn-clear cancel" title="Reset"
                                    value="reset" formnovalidate="formnovalidate">
                                RESET
                            </button>
                        </div>
                    </div>
                </div>
                <!-- /.box-footer-->
            </div>
            <!-- /.box -->
        </div>
    </div>
        <!-- danger with sound -->
        <div class="message-box animated fadeIn" data-sound="alert" id="mb-act-cnfrm">
            <div class="mb-container">
                <div class="mb-middle">
                    <div class="mb-title"><span class="fa fa-warning"></span> Confirm <strong>Box</strong> ?</div>
                    <div class="mb-content">
                        <p>Are you sure you want to delete?</p>
                        <p>Press No if you want to Cancel. Press Yes to Delete the record.</p>
                    </div>
                    <div class="mb-footer">
                        <div class="pull-right">
                            <a id="confirmhref" href="#" class="btn btn-confirm-yes btn-lg">Yes</a>
                            <button class="btn btn-confirm-no btn-lg mb-control-close">No</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- end danger with sound -->
        <!-- /.row (main row) -->
        <!-- Modal -->
        @*<div class="modal fade" id="modalAddBranch" style="display: none;">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                            <h4 class="modal-title">Default Modal</h4>
                        </div>
                        <div class="modal-body">
                            <p>One fine body…</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                    <!-- /.modal-content -->
                </div>
                <!-- /.modal-dialog -->
            </div>*@
    }
</section>
<!-- /.content -->
